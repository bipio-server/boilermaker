// (c) WoT.IO inc (2014)
// ### About
//        BipIO Pod Manifest Definition v0.1 (draft)
// The `bpm.json` file describes how to assemble a Pod boilerplate programatically
// and is an authoritative schema from which different views can be surfaced.

// ### General Config
// Defines general information about this Pod
{
  // __Name__ (_string_) alphanumeric, lowercase object key (unique key)
  "name" : "pod_name",

  // __Title__ (_string_) is the short, human readable version of `name`
  "title" : "Pod Name",

  // __Useful Description__ (_string_) is the description used when generating UI and supporting documentation
  "description" : "For doing X-Y-Z",

  // __Provider URL__ (_string_, optional) URL to service provider
  "url" : "Provider URL",

  // __Track Duplicates__ (_boolean_, optional default `false`) Pod requires a de-duplication resource
  "trackDuplicates" : true,

  // __Data Sources__ (_array_, optional) Array of model objects which should be bound to a DAO resource
  "dataSources" : [
    {
      "entityName" : "my_model",
      "schema" : {
        "id" : {
          "type" : "string"
        }
      }
    }
  ],

  // __Config__ (_object_) anything here is persisted to server config (`default.json`) when the pod is installed
  "config" : {
    "example_stored_key" : "value",

    // __OAuth Config__ (_object_) if your pod uses oAuth, store the <a href="http://passportjs.org/">node-passport</a> strategy configs here.
    "oauth" : {
      "clientID" : "oauth client id",
      "clientSecret" : "oauth client secret"
    }
  },

  // ### Authentication
  // The Authentication block describes how users should authenticate setup of their channels, and
  // what credentials to use when channels are invoked

  // __Auth Strategy__ (_object_, optional) user authentication strategy
  "auth" : {

    // __Strategy Name__ (_string_) `oauth` or `issuer_token`
    "strategy" : "oauth",

    // __Passport Strategy Name__ (_string_) when `strategy : oauth`, supply the name of the <a href="http://passportjs.org/">node-passport</a> strategy here
    "passportStrategy" : "google",

    // __Auth Map__ (_object_, optional) when `strategy : issuer_token`, `authMap` maps internal attributes to how it is described by the pod provider.
    // For example, HipChat needs an access token, so `authMap` contains `password : 'API Access Token'`.
    // __Note__ Its up to pods to implement this mapping
    "authMap" : {
      "username" : "User Name Label",
      "password" : "API Key",
      "key" : "Private Key"
    }
  },

  // ### Renderers
  // Renderers RPC's passsed through by BipIO

  // __Renderers__ (_object_, optional) RPC's implemented by this pod
  "renderers" : {
    // __Key__ (_object_) Renderer key, becomes the URI eg:  `/rpc/pod/:pod_name/:rpc_name`
    "rpc_name" : {
      // __Title__ (_string_) Short, human readable renderer label
      "title" : "Do Something",
      // __Description__ (_string_) extended description
      "description" : "This is what it does",
      // __Content Type__ (_string_) expected response mime type
      "contentType" : "application/json"
    }
  },

  // ### Actions
  // Actions are individual methods supplied by the provider API.  When a channel is created,
  // it points to `pod_name.action_name`

  // __Actions__ (_object_) Implemented Action Schemas
  "actions" : {
      // __Action Key__ (_object_) Action Schema, keyed by the name of the action.
      // action implementation will be written to `./{action_name}.js` for this pod
      "action_name" : {
        // __Title__ (_string_) Short, human readable action name
        "title" : "Action Name",

        // __Description__ (_string_) extended description
        "description":"Action Name does some great thing",

        // __Trigger__ (_string_, optional) one of `invoke|poll|realtime`.
        // * `invoke` - (default) must be explicitly invoked
        // * `poll` - should be periodically polled with system scheduler
        // * `realtime` - self managed
        "trigger" : "invoke",

        // #### Configuration
        // config items make immutable attributes available, or provide sane defaults
        // in the case of an import not existing

        // __Config__ (_object_, optional) Channel Configuration Schema - channel defaults.
        // Expects <a href="http://json-schema.org/">JSON Schema</a>
        "config" : {
            // __Properties__ (_object_, optional) JSON-Schema Properties Object
            "properties": {
              // __Name__ (_object_) Property, keyed by name
              "rcpt_to" : {
                // __Type__ (_string_) Property type, `string|text|object|array|number|boolean`
                "type" : "string",
                // __Title__ (_string_) Short, human readable action label
                "title" : "Email Address",
                // __Description__ (_string_) extended description
                "description" : "(eg : foo@bar.com)",
                // __Default__ (_mixed_) default value
                "default" : "Some Sane Default"
              }
            },
            // __Required Fields__ (_array_, optional) list of required property `name`
            "required": [
              "rcpt_to"
           ],
           // __Disposition__ (_array_) ordered list of property names, where required fields
           // are first, then optional properties, then most optional properties
           "disposition" : [
            "rcpt_to"
           ]
        },

        // #### Imports
        // Imports define the data structure this action _expects_

        // __Imports__ (_object_, optional) Data Imports Schema.
        // Expects <a href="http://json-schema.org/">JSON Schema</a>
        "imports" : {
            // __Properties__ (_object_, optional) JSON-Schema Properties Object
            "properties": {
              // __Name__ (_object_) Property, keyed by name
              "message_id" : {
                // __Type__ (_string_) Property type, `string|text|object|array|number|boolean`
                "type" : "string",
                // __Title__ (_string_) Short, human readable action label
                "title" : "Message ID",
                // __Description__ (_string_) extended description
                "description" : "abc-123",
              }
            },
            // __Required Fields__ (_array_, optional) list of required property `name`
            "required": [
              "rcpt_to"
           ],
           // __Disposition__ (_array_) ordered list of property names, where required fields
           // are first, then optional properties, then most optional properties.
           "disposition" : [
            "rcpt_to"
           ]
        },

        // #### Exports
        // Exports define the data structure this action _produces_

        // __Exports__ (_object_, optional) Data Exports Schema.
        // Expects <a href="http://json-schema.org/">JSON Schema</a>
        "exports" : {
            // __Properties__ (_object_, optional) JSON-Schema Properties Object
            "properties": {
              // __Name__ (_object_) Property, keyed by name
              "message_id" : {
                // __Type__ (_string_) Property type, `string|text|object|array|number|boolean`
                "type" : "string",

                // __Title__ (_string_) Short, human readable action label
                "title" : "Message ID",
                // __Description__ (_string_) extended description
                "description" : "abc-123"
              }
            }
        },

        // #### Renderers
        // __Renderers__ (_object_, optional) RPC's implemented by this __Action__
        "renderers" : {
          // __Key__ (_object_) Renderer key, becomes the URI eg: `/rpc/channel/:channel_id/:action_rpc_name`
          "action_rpc_name" : {
            // __Title__ (_string_) Short, human readable renderer label
            "title" : "Do Something",
            // __Description__ (_string_) extended description
            "description" : "This is what it does",
            // __Content Type__ (_string_) expected response mime type
            "contentType" : "application/json"
          }
        }
     }
  }
}